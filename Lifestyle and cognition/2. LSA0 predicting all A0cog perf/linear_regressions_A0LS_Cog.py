#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  8 11:50:25 2022

@author: malika
"""

# This code uses a dataset combining A0 lifestyle, age and gender wiith performance iin cognitive testss at A0 and runs linear regressions to see how each lifestyle factor correlates with cognition


import pandas as pd
import numpy as np
from scipy import stats
from pandas_profiling import ProfileReport
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.regression.linear_model import OLS
import statsmodels.api as sm


##TO MODIFY BY USER
### Instruction: You will need to run thise codeonce for each Assessment number wanted (A0, A1, A2) 
#### Enter the directory with the cleaned csv file (folder with the file generated by 1_DataCleaner)
path = '/Users/malika/Documents/Five Lives/SI Data Analysis/LifestyleCognition/Datasets & Data cleaning/'
Data = pd.read_csv(path + 'DataframeCogPerfA0.csv')

plot = '/Users/malika/Documents/Five Lives/SI Data Analysis/LifestyleCognition/HierarchicalClusteringAnalysis/A0-RT/Plots - Regression and clustering/'

Data = Data.set_index('participant_id')


# Separate the variabless lifesstyle (predictors) and cognition (to predict)
lifestyle = ['A0PA_duration',
 'A0PA_intensity',
 'A0PA_score',
 'A0smoking_situation',
 'A0smoking_amount',
 'A0socialI',
 'A0loneliness',
 'A0sleep_problems',
 'A0fruit_veg',
 'A0alcohol_unit',
 'A0glasses_water',
 'A0time_reading',
 'A0time_mental_stimulation',
 'A0time_instrument',
 'A0time_skill',
 'A0relaxed_scale',
 'A0mood_rate',
 'A0enjoyment_activities']


cog = ['A0cast_performance',
       'A0snap_category_performance', 'A0snap_initials_performance',
       'A0swift_incongruent_performance', 'A0swift_congruent_performance',
       'A0twist_performance']


## Predictioins (controlling for age and gender)
c = 'A0_age + A0male'
for to_predict in cog:
    # drop nan in each subset to predict to avoid errors due to too many nan
    model_sum = ['by ' + to_predict]
    for predictor in lifestyle:
        model_sum.append(predictor)
        df = Data.dropna(axis = 0, subset = [to_predict, predictor])
        try:
            #Model
            m = to_predict + ' ~ ' + predictor + ' + ' + c
            mdf_p = OLS.from_formula(m, df)
            mdf = mdf_p.fit()
            #Create a list to save the models
            model_sum.append(mdf.summary())
            file_name = to_predict
            path = plot + file_name+'.txt'
            fp= open(path, 'w')
            with open(path, 'w') as fp:
                for item in model_sum:
                    # write each item on a new line
                    fp.write("%s\n" % item)
                    print('Done')
        except:
            fail = to_predict + '_by_' + predictor
            fail_sum.append(fail)
            path = plot + 'ErrorRaised.txt'
            fp= open(path, 'w')
            with open(path, 'w') as fp:
                for item in fail_sum:
                    # write each item on a new line
                    fp.write("%s\n" % item)
                    print('Done')
                    
# Analxisis for pillars
physical_var = ['A0PA_duration', 'A0PA_intensity', 'A0PA_score']
sleep_var = 'A0sleep_problems'
diet_var =  ['A0fruit_veg', 'A0alcohol_unit', 'A0glasses_water']

smoking_var =  ['A0smoking_situation', 'A0smoking_amount']
mood_var =  ['A0relaxed_scale', 'A0mood_rate', 'A0enjoyment_activities']
mental_stim_var =  ['A0socialI', 'A0loneliness', 'A0time_mental_stimulation', 'A0time_instrument', 'A0time_skill', 'A0time_reading']


## Model reproeduced on FL pillars
FL_pillars = [physical_var, sleep_var, diet_var, mood_var, mental_stim_var, smoking_var ]
fail_sum = []
### For list for cognitive change variables
for to_predict in cog:
    df = Data.dropna(axis = 0, subset = [to_predict])
    # drop nan in each subset to predict to avoid errors due to too many nan
    model_sum = [to_predict]
    for predictor in FL_pillars:
        df = Data.dropna(axis = 0, subset = predictor)
        try:
            #Model
            ## Build the model formula based on the listt of predictors
            for i in range(1, len(predictor)):
                m_predictor = predictor[0]
                m_predictor = m_predictor + ' + ' + predictor[i]
            
            m = to_predict + ' ~ ' + m_predictor + ' + ' + c
            mdf_p = OLS.from_formula(m, df)
            mdf = mdf_p.fit()
            #Create a list to save the models
            model_sum.append(mdf.summary())
            file_name = to_predict
            path = plot + 'pillar/'+ file_name+'.txt'
            fp= open(path, 'w')
            with open(path, 'w') as fp:
                for item in model_sum:
                    # write each item on a new line
                    fp.write("%s\n" % item)
                    print('Done')
        except:
            fail = to_predict + '_by_' + m_predictor
            fail_sum.append(fail)
            path = plot + 'pillar/'+ file_name+'.txt'
            fp= open(path, 'w')
            with open(path, 'w') as fp:
                for item in fail_sum:
                    # write each item on a new line
                    fp.write("%s\n" % item)
                    print('Done')
                    
            